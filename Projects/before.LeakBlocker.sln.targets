<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask Condition="'$(OutDir)' != ''"
             TaskName="MSBuild"
             TaskFactory="CodeTaskFactory"
             AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <ParameterGroup>
      <Projects ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <BuildInParallel ParameterType="System.Boolean" />
      <Properties ParameterType="System.String[]" />
      <SkipNonexistentProjects ParameterType="System.String" />
      <TargetOutputs ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
      <Targets ParameterType="System.String[]" />
    </ParameterGroup>
    <Task>
      <Reference Include="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
var newProperties = new System.Collections.Generic.List<string>(Properties);
newProperties.Add(@"PreferredOutDir=$(OutDir)");
var childTask = new Microsoft.Build.Tasks.MSBuild();
childTask.BuildEngine = BuildEngine;
childTask.Projects = Projects;
childTask.BuildInParallel = BuildInParallel;
childTask.Properties = newProperties.ToArray();
childTask.SkipNonexistentProjects = SkipNonexistentProjects;
childTask.Targets = Targets;
childTask.RemoveProperties = "OutDir"; // Magic happens here!
var result = childTask.Execute();
TargetOutputs = childTask.TargetOutputs;
return result;
]]>
      </Code>
    </Task>
  </UsingTask>
</Project>